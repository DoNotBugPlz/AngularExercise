<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       ">

    <!-- 载入properties配置文件 -->
    <bean id="placeholderProperties"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/db.properties</value>
            </list>
        </property>
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="order" value="1" />
    </bean>

    <!-- **************************************************** 所有数据源继承该连接池配置 ********************************************************************* -->
    <bean id="abstractDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" abstract="true">
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <property name="initialSize" value="1"/>
        <!--最小连接池数量-->
        <property name="minIdle"     value="1"/>
        <!--最大连接池数量-->
        <property name="maxActive"   value="20"/>
        <!-- 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
        <property name="maxWait"     value="30000"/>

        <!-- 有两个含义：
        1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接
        2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明  -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 连接保持空闲而不被驱逐的最长时间，默认30分钟 -->
        <property name="minEvictableIdleTimeMillis"    value="86400"/>

        <!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
        <property name="validationQuery" value="SELECT 'x' from dual"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnBorrow"    value="true"/>
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn"    value="false"/>
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
        <property name="testWhileIdle"   value="true"/>

        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
        <property name="poolPreparedStatements"    value="true"/>
        <!--要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100-->
        <property name="maxOpenPreparedStatements" value="100"/>

        <!-- 配置监控统计拦截的filters -->
        <!--<property name="filters" value="log4j"/>-->
        <property name="proxyFilters">
            <list>
                <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter">
                    <property name="slowSqlMillis" value="10000"/><!--单位：毫秒-->
                    <property name="logSlowSql" value="true"/>
                    <property name="mergeSql" value="true"/>
                </bean>
                <bean class="com.alibaba.druid.filter.logging.Log4j2Filter">
                    <property name="statementExecutableSqlLogEnable" value="true" />
                    <property name="resultSetLogEnabled" value="false" />
                </bean>
                <bean class="com.alibaba.druid.wall.WallFilter">
                    <property name="logViolation" value="true"/>
                    <property name="throwException" value="false"/>
                </bean>
            </list>
        </property>
    </bean>

    <!-- 事务控制 ：声明式事务 -->
    <aop:aspectj-autoproxy expose-proxy="true"/>

    <!--业务组件数据库配置-->
    <bean id="dataSource" parent="abstractDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="username">
            <value>${jdbc.username}</value>
        </property>
        <property name="password" value="${jdbc.password}"/>
        <!-- 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时 -->
        <property name="initialSize" value="5"/>
        <!--最小连接池数量-->
        <property name="minIdle" value="5"/>
        <!--最大连接池数量-->
        <property name="maxActive" value="10"/>
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!-- 扫描业务组件实体类 -->
        <property name="packagesToScan">
            <list>
                <value>com.skytech.*.model.**</value>
                <value>com.skytech.project.**.model.**</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${jdbc.dialect}</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.use_sql_comments">true</prop>
                <prop key="hibernate.default_schema">${jdbc.default_schema}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.generate_statistics">false</prop>
                <prop key="hibernate.cache.use_structured_entries">true</prop>
                <!--batch的值决定了每次提交SQL的数量，适量增大该值，可以减少访问数据库的次数-->
                <prop key="hibernate.jdbc.batch_size">50</prop>
                <prop key="hibernate.hbm2ddl.auto">validate</prop>
                <!-- 该配置为了让hibernate选用新的主键生成器来配置主键生成，更高效 -->
                <prop key="hibernate.id.new_generator_mappings">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="net.sf.ehcache.configurationResourceName">/primary_ehcache_hibernate.xml</prop>
                <prop key="hibernate.hql.bulk_id_strategy">
                    org.hibernate.hql.spi.id.inline.InlineIdsOrClauseBulkIdStrategy
                </prop>
            </props>
        </property>
    </bean>
    <!-- 事务 -->
    <tx:annotation-driven transaction-manager="txManager"/>
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!--规定spring的事务传播行为为Required，表示当前没有事务就新建一个事务，如果已经存在一个事务，则加入到这个事务中-->
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" read-only="false"/>
        </tx:attributes>
    </tx:advice>
    <!-- 整合连接点和增强 -->
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* com.skytech..service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    
    <!-- 将配置的所有SessionFactory加载到内存中，在xxxBaseDao中可以根据DBNAME的设置调用不同的SessionFactory -->
    <bean id="sessionFactoryManage" class="com.skytech.persistence.util.SessionFactoryManage">
        <property name="sessionFactoryMap">
            <util:map map-class="java.util.HashMap" key-type="java.lang.String" value-type="org.hibernate.SessionFactory">
                <entry key="defaultdb">
                    <ref bean="sessionFactory"/>
                </entry>
                            </util:map>
        </property>
    </bean>
</beans>